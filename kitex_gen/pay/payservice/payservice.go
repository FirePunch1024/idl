// Code generated by Kitex v0.5.2. DO NOT EDIT.

package payservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	pay "pay/kitex_gen/pay"
)

func serviceInfo() *kitex.ServiceInfo {
	return payServiceServiceInfo
}

var payServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "payService"
	handlerType := (*pay.PayService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Notify": kitex.NewMethodInfo(notifyHandler, newPayServiceNotifyArgs, newPayServiceNotifyResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "pay",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func notifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*pay.PayServiceNotifyArgs)
	realResult := result.(*pay.PayServiceNotifyResult)
	success, err := handler.(pay.PayService).Notify(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPayServiceNotifyArgs() interface{} {
	return pay.NewPayServiceNotifyArgs()
}

func newPayServiceNotifyResult() interface{} {
	return pay.NewPayServiceNotifyResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Notify(ctx context.Context, request *pay.NotifyReq) (r *pay.NilResponse, err error) {
	var _args pay.PayServiceNotifyArgs
	_args.Request = request
	var _result pay.PayServiceNotifyResult
	if err = p.c.Call(ctx, "Notify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
